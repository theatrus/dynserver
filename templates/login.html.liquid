{% assign page_title = "Login" %}
{% assign meta_description = "Login to access the photo gallery" %}
{% assign page_css = "login.css" | split: "," %}
{% include "_header.html.liquid" %}

<div class="container">
    <div class="login-container">
        <h1>Login</h1>
        
        <div id="loginFormContainer">
            <p>Enter your username or email address to sign in.</p>
            
            <form id="loginForm">
                <div class="form-group">
                    <label for="username">Username or Email:</label>
                    <input type="text" id="username" name="username" placeholder="username or email@example.com" required autofocus>
                </div>
                
                <button type="submit" class="btn-primary">Continue</button>
            </form>
        </div>
        
        <div id="authenticatingContainer" style="display: none;">
            <div class="authenticating-message">
                <div class="spinner"></div>
                <p>Authenticating with your passkey...</p>
                <p class="small-text">Follow the prompts on your device</p>
            </div>
        </div>
        
        <div id="successContainer" style="display: none;">
            <div id="message" class="message success"></div>
            <p style="text-align: center; margin-top: 20px;">
                <a href="/_login" class="try-again-link">Try again</a>
            </p>
        </div>
        
        <div id="errorMessage" class="message error" style="display: none;"></div>
    </div>
</div>

<script>
// Handle login form submission
document.getElementById('loginForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const username = document.getElementById('username').value.trim();
    const messageDiv = document.getElementById('message');
    const errorDiv = document.getElementById('errorMessage');
    const submitButton = e.target.querySelector('button[type="submit"]');
    const formContainer = document.getElementById('loginFormContainer');
    const successContainer = document.getElementById('successContainer');
    const authenticatingContainer = document.getElementById('authenticatingContainer');
    
    // Hide any previous error messages
    errorDiv.style.display = 'none';
    
    if (!username) {
        errorDiv.textContent = 'Please enter a username or email address';
        errorDiv.style.display = 'block';
        return;
    }
    
    submitButton.disabled = true;
    submitButton.textContent = 'Checking...';
    
    try {
        // First, check if WebAuthn is supported and if user has passkeys
        if (window.PublicKeyCredential) {
            const checkResponse = await fetch('/api/webauthn/check-passkeys', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: username })
            });
            
            if (checkResponse.ok) {
                const { has_passkeys } = await checkResponse.json();
                
                if (has_passkeys) {
                    // User has passkeys, try to authenticate with them
                    formContainer.style.display = 'none';
                    authenticatingContainer.style.display = 'block';
                    
                    try {
                        await authenticateWithPasskey(username);
                        // Success - user will be redirected
                        return;
                    } catch (passkeyError) {
                        // Passkey auth failed, continue with email flow
                        authenticatingContainer.style.display = 'none';
                        formContainer.style.display = 'block';
                        
                        // Show a brief message about falling back to email
                        errorDiv.textContent = 'Passkey authentication cancelled. Sending login email instead...';
                        errorDiv.style.display = 'block';
                        errorDiv.classList.add('info');
                        
                        // Small delay before sending email
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                }
            }
        }
        
        // Send email login request (either no passkeys or passkey auth failed)
        submitButton.textContent = 'Sending...';
        errorDiv.style.display = 'none';
        errorDiv.classList.remove('info');
        
        const response = await fetch('/_login/request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: username })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Hide the form and show success message
            formContainer.style.display = 'none';
            authenticatingContainer.style.display = 'none';
            messageDiv.textContent = data.message;
            successContainer.style.display = 'block';
        } else {
            // Show error message below the form
            errorDiv.textContent = data.message || 'Login failed';
            errorDiv.style.display = 'block';
        }
        
    } catch (error) {
        authenticatingContainer.style.display = 'none';
        formContainer.style.display = 'block';
        errorDiv.textContent = 'An error occurred. Please try again.';
        errorDiv.style.display = 'block';
    } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Continue';
    }
});

// Handle passkey authentication
async function authenticateWithPasskey(username) {
    // Start passkey authentication
    const startResponse = await fetch('/api/webauthn/authenticate/start', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username: username })
    });
    
    if (!startResponse.ok) {
        throw new Error('Failed to start authentication');
    }
    
    const options = await startResponse.json();
    
    // Convert challenge from base64
    options.challenge = base64ToArrayBuffer(options.challenge);
    
    // Convert allowCredentials
    if (options.allowCredentials) {
        options.allowCredentials = options.allowCredentials.map(cred => ({
            ...cred,
            id: base64ToArrayBuffer(cred.id)
        }));
    }
    
    // Get credential
    const credential = await navigator.credentials.get({
        publicKey: options
    });
    
    // Send authentication response
    const finishResponse = await fetch(`/api/webauthn/authenticate/finish/${options.auth_id}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            id: credential.id,
            rawId: arrayBufferToBase64(credential.rawId),
            response: {
                authenticatorData: arrayBufferToBase64(credential.response.authenticatorData),
                clientDataJSON: arrayBufferToBase64(credential.response.clientDataJSON),
                signature: arrayBufferToBase64(credential.response.signature),
                userHandle: credential.response.userHandle ? arrayBufferToBase64(credential.response.userHandle) : null
            },
            type: credential.type
        })
    });
    
    if (finishResponse.ok) {
        // Redirect to gallery on success
        window.location.href = '/gallery';
    } else {
        throw new Error('Authentication failed');
    }
}

// Utility functions for base64 conversion
function base64ToArrayBuffer(base64) {
    const binaryString = window.atob(base64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
}

function arrayBufferToBase64(buffer) {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
</script>

<style>
.authenticating-message {
    text-align: center;
    padding: 40px 20px;
}

.authenticating-message p {
    margin: 10px 0;
}

.authenticating-message .small-text {
    font-size: 0.875rem;
    color: var(--text-quaternary);
}

.spinner {
    border: 3px solid var(--border-color);
    border-top: 3px solid var(--link-color);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.message.info {
    background-color: rgba(23, 162, 184, 0.1);
    color: #17a2b8;
    border: 1px solid rgba(23, 162, 184, 0.3);
}
</style>

{% include "_footer.html.liquid" %}