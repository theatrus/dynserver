{{ header }}

<div class="container gallery-container">
    <!-- Navigation Breadcrumb -->
    <nav class="gallery-nav">
        {% for crumb in breadcrumbs %}
            {% unless forloop.first %}
                <span class="nav-separator">‚Üí</span>
            {% endunless %}
            {% if crumb.is_current %}
                <span class="nav-current">{{ crumb.display_name }}</span>
            {% else %}
                <a href="/gallery{% if crumb.path != "" %}/{{ crumb.path }}{% endif %}" class="nav-link">{{ crumb.display_name }}</a>
            {% endif %}
        {% endfor %}
    </nav>

    {% if folder_title %}
        <h2>{{ folder_title }}</h2>
    {% else %}
        <h2>Photo Gallery{% if gallery_path != "" %}: {{ gallery_path }}{% endif %}</h2>
    {% endif %}
    
    {% if folder_description %}
        <div class="folder-description">
            {{ folder_description }}
        </div>
    {% endif %}
    
    {% if items.size > 0 %}
        <!-- Directory Navigation -->
        {% assign directories = items | where: "is_directory", true %}
        {% if directories.size > 0 %}
            <div class="gallery-folders">
                <h3>Folders</h3>
                <div class="folder-grid">
                    {% for dir in directories %}
                        <a href="/gallery/{{ dir.path }}" class="folder-item">
                            <div class="folder-preview">
                                {% if dir.preview_images and dir.preview_images.size > 0 %}
                                    <div class="preview-images">
                                        {% for image_url in dir.preview_images limit: 4 %}
                                            <img src="{{ image_url }}" alt="Preview" loading="lazy" class="preview-img preview-img-{{ forloop.index }}">
                                        {% endfor %}
                                    </div>
                                {% else %}
                                    <div class="folder-icon">üìÅ</div>
                                {% endif %}
                            </div>
                            <div class="folder-info">
                                <div class="folder-name">
                                    {% if dir.display_name %}
                                        {{ dir.display_name }}
                                    {% else %}
                                        {{ dir.name }}
                                    {% endif %}
                                </div>
                                <div class="folder-count">{{ dir.item_count }} images</div>
                                {% if dir.description %}
                                    <div class="folder-description-preview">{{ dir.description | strip_html | truncate: 100 }}</div>
                                {% endif %}
                            </div>
                        </a>
                    {% endfor %}
                </div>
            </div>
        {% endif %}
        
        <!-- Image Gallery -->
        {% if images.size > 0 %}
            <div class="gallery-images">
                <h3>Images</h3>
                <div class="image-grid" id="gallery-grid">
                    <div class="masonry-column" data-column="0"></div>
                    <div class="masonry-column" data-column="1"></div>
                </div>
                
                <!-- Hidden template for images -->
                <script type="application/json" id="gallery-images">
{{ images_json }}
                </script>
                
                <!-- Pagination -->
                {% if total_pages > 1 %}
                    <div class="gallery-pagination">
                        {% if has_prev %}
                            <a href="?page={{ prev_page }}" class="page-link">‚Üê Previous</a>
                        {% endif %}
                        
                        <span class="page-info">Page {{ current_page | plus: 1 }} of {{ total_pages }}</span>
                        
                        {% if has_next %}
                            <a href="?page={{ next_page }}" class="page-link">Next ‚Üí</a>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        {% endif %}
    {% else %}
        <p class="empty-gallery">No images found in this directory.</p>
    {% endif %}
</div>

<style>
body {
    background-color: #1a1a1a;
    color: #e0e0e0;
}

.gallery-container {
    max-width: 1400px;
    background-color: #1a1a1a;
}

.gallery-nav {
    margin-bottom: 1.5rem;
    padding: 0.75rem 0;
    border-bottom: 1px solid #404040;
    font-size: 0.9rem;
    display: inline-block;
    width: auto;
}

.nav-link {
    color: #888;
    text-decoration: none;
    transition: color 0.2s;
}

.nav-link:hover {
    color: #e0e0e0;
}

.nav-separator {
    color: #666;
    margin: 0 0.5rem;
}

.nav-current {
    color: #e0e0e0;
    font-weight: 500;
}

.folder-description {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: #404040;
    border-radius: 8px;
    color: #e0e0e0;
    line-height: 1.6;
}

.folder-description h1,
.folder-description h2,
.folder-description h3,
.folder-description h4,
.folder-description h5,
.folder-description h6 {
    color: #e0e0e0;
}

.folder-description p {
    margin-bottom: 1rem;
}

.folder-description p:last-child {
    margin-bottom: 0;
}

.folder-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
}

.folder-item {
    display: flex;
    flex-direction: column;
    background: #404040;
    border-radius: 8px;
    text-decoration: none;
    color: #e0e0e0;
    transition: transform 0.2s, box-shadow 0.2s;
    overflow: hidden;
}

.folder-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.4);
}

.folder-preview {
    width: 100%;
    height: 160px;
    position: relative;
    overflow: hidden;
    background: #2a2a2a;
    display: flex;
    align-items: center;
    justify-content: center;
}

.folder-icon {
    font-size: 3rem;
    color: #888;
}

.preview-images {
    position: relative;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 2px;
}

.preview-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s;
}

.preview-img:only-child {
    grid-column: 1 / -1;
    grid-row: 1 / -1;
}

.preview-images:has(.preview-img:nth-child(2):last-child) .preview-img {
    grid-row: 1 / -1;
}

.preview-images:has(.preview-img:nth-child(3):last-child) .preview-img:first-child {
    grid-column: 1 / -1;
}

.preview-img-1 {
    z-index: 4;
}

.preview-img-2 {
    z-index: 3;
}

.preview-img-3 {
    z-index: 2;
}

.preview-img-4 {
    z-index: 1;
}

.folder-info {
    padding: 1rem;
    text-align: center;
}

.folder-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
    font-size: 0.95rem;
}

.folder-count {
    font-size: 0.8rem;
    color: #999;
}

.folder-description-preview {
    font-size: 0.75rem;
    color: #bbb;
    margin-top: 0.5rem;
    line-height: 1.3;
}

.image-grid {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 2rem;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
}

.masonry-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    min-width: 0; /* Allow flex items to shrink */
}

@media (max-width: 768px) {
    .image-grid {
        flex-direction: column;
        gap: 1rem;
    }
    
    .masonry-column[data-column="1"] {
        display: none;
    }
}

.image-item {
    position: relative;
    background: #404040;
    border-radius: 0;
    overflow: hidden;
    transition: transform 0.2s;
    display: block;
}

.image-item:hover {
    transform: scale(1.02);
}

.image-link {
    display: block;
    position: relative;
}

.image-item img {
    width: 100%;
    height: auto;
    display: block;
}


.gallery-pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    margin-top: 3rem;
    padding: 2rem 0;
}

.page-link {
    padding: 0.5rem 1rem;
    background: #404040;
    color: #e0e0e0;
    text-decoration: none;
    border-radius: 4px;
    transition: background 0.3s;
}

.page-link:hover {
    background: #555;
}

.page-info {
    font-weight: 500;
}

.empty-gallery {
    text-align: center;
    padding: 4rem 0;
    color: #999;
}

</style>

<script>
// Client-side masonry layout
(function() {
    const galleryGrid = document.getElementById('gallery-grid');
    const imagesDataElement = document.getElementById('gallery-images');
    
    if (!galleryGrid || !imagesDataElement) return;
    
    let images;
    try {
        images = JSON.parse(imagesDataElement.textContent);
    } catch (e) {
        console.error('Failed to parse gallery images data:', e);
        return;
    }
    
    function calculateColumnWidth() {
        const viewportWidth = window.innerWidth;
        const containerWidth = Math.min(viewportWidth, 1200);
        const containerPadding = 40;
        const gap = 24; // 1.5rem
        
        if (viewportWidth <= 768) {
            // Mobile: single column
            return containerWidth - containerPadding;
        } else {
            // Desktop: two columns
            return (containerWidth - containerPadding - gap) / 2;
        }
    }
    
    function calculateDisplayDimensions(originalWidth, originalHeight, maxWidth) {
        if (originalWidth <= maxWidth) {
            return { width: originalWidth, height: originalHeight };
        } else {
            const ratio = maxWidth / originalWidth;
            return { 
                width: maxWidth, 
                height: Math.round(originalHeight * ratio)
            };
        }
    }
    
    function createImageElement(image, displayDimensions) {
        const cleanName = image.name
            .replace(/\./g, '')
            .replace(/\s/g, '')
            .replace(/-/g, '')
            .replace(/_/g, '');
        
        const itemDiv = document.createElement('div');
        itemDiv.className = 'image-item';
        itemDiv.id = cleanName;
        itemDiv.setAttribute('data-path', image.path);
        itemDiv.style.width = displayDimensions.width + 'px';
        itemDiv.style.height = displayDimensions.height + 'px';
        
        const link = document.createElement('a');
        link.href = '/gallery/detail/' + image.path;
        link.className = 'image-link';
        
        const img = document.createElement('img');
        img.src = image.gallery_url;
        img.alt = image.name;
        img.width = displayDimensions.width;
        img.height = displayDimensions.height;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        
        link.appendChild(img);
        itemDiv.appendChild(link);
        
        return itemDiv;
    }
    
    function layoutMasonry() {
        const columnWidth = calculateColumnWidth();
        const viewportWidth = window.innerWidth;
        const numColumns = viewportWidth <= 768 ? 1 : 2;
        
        // Clear existing content
        const columns = galleryGrid.querySelectorAll('.masonry-column');
        columns.forEach(col => col.innerHTML = '');
        
        // Hide/show columns based on viewport
        columns[0].style.display = 'flex';
        if (columns[1]) {
            columns[1].style.display = numColumns > 1 ? 'flex' : 'none';
        }
        
        // Track column heights
        const columnHeights = new Array(numColumns).fill(0);
        
        // Process each image
        images.forEach(image => {
            const displayDimensions = calculateDisplayDimensions(
                image.dimensions[0], 
                image.dimensions[1], 
                columnWidth
            );
            
            // Find shortest column
            const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
            
            // Create and append image element
            const imageElement = createImageElement(image, displayDimensions);
            columns[shortestColumnIndex].appendChild(imageElement);
            
            // Update column height
            columnHeights[shortestColumnIndex] += displayDimensions.height + 24; // gap
        });
    }
    
    // Initial layout
    layoutMasonry();
    
    // Handle window resize with debouncing
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(layoutMasonry, 150);
    });
    
    // Handle anchor links after layout is complete
    if (window.location.hash) {
        setTimeout(() => {
            const targetElement = document.getElementById(window.location.hash.substring(1));
            if (targetElement) {
                targetElement.scrollIntoView({ behavior: 'smooth' });
            }
        }, 100);
    }
})();
</script>

{{ footer }}