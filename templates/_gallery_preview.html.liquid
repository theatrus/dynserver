{% if gallery_preview and gallery_preview.size > 0 %}
    <section class="gallery-preview-component">
        <div class="preview-masonry" id="gallery-preview-grid">
            <div class="masonry-column" data-column="0"></div>
            <div class="masonry-column" data-column="1"></div>
        </div>
        {% if show_explore_link != false %}
            <div class="preview-footer">
                <a href="/gallery" class="btn-explore">Explore Full Gallery â†’</a>
            </div>
        {% endif %}
    </section>
    
    <!-- Hidden data for preview images -->
    <script type="application/json" id="gallery-preview-images">
{{ gallery_preview_json }}
    </script>
{% endif %}

<style>
.gallery-preview-component {
    margin: 2rem 0;
}

.gallery-preview-component .preview-masonry {
    display: flex;
    gap: 1.5rem;
}

.gallery-preview-component .masonry-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    min-width: 0;
}

.gallery-preview-component .preview-item {
    background: #404040;
    overflow: hidden;
    text-decoration: none;
    color: inherit;
    transition: transform 0.3s, box-shadow 0.3s;
    display: block;
}

.gallery-preview-component .preview-item:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.4);
}

.gallery-preview-component .preview-image {
    position: relative;
    overflow: hidden;
    background: transparent;
    display: block;
}

.gallery-preview-component .preview-image img {
    object-fit: cover;
    transition: transform 0.3s;
    display: block;
}

.gallery-preview-component .preview-item:hover .preview-image img {
    transform: scale(1.05);
}


.gallery-preview-component .preview-footer {
    text-align: center;
    margin-top: 2rem;
}

.gallery-preview-component .btn-explore {
    display: inline-block;
    padding: 0.75rem 2rem;
    background: #555;
    color: #e0e0e0;
    text-decoration: none;
    font-weight: 500;
    transition: background 0.3s;
}

.gallery-preview-component .btn-explore:hover {
    background: #666;
}

@media (max-width: 768px) {
    .gallery-preview-component .preview-masonry {
        flex-direction: column;
        gap: 1rem;
    }
    
    .gallery-preview-component .masonry-column[data-column="1"] {
        display: none;
    }
}
</style>

<script>
// Client-side gallery preview masonry layout
(function() {
    const previewGrid = document.getElementById('gallery-preview-grid');
    const previewDataElement = document.getElementById('gallery-preview-images');
    
    if (!previewGrid || !previewDataElement) return;
    
    let previewImages;
    try {
        previewImages = JSON.parse(previewDataElement.textContent);
    } catch (e) {
        console.error('Failed to parse gallery preview images data:', e);
        return;
    }
    
    function calculatePreviewColumnWidth() {
        const viewportWidth = window.innerWidth;
        const containerWidth = Math.min(viewportWidth, 1200);
        const containerPadding = 40;
        const gap = 24; // 1.5rem
        
        if (viewportWidth <= 768) {
            // Mobile: single column
            return containerWidth - containerPadding;
        } else {
            // Desktop: two columns
            return (containerWidth - containerPadding - gap) / 2;
        }
    }
    
    function calculatePreviewDisplayDimensions(originalWidth, originalHeight, maxWidth) {
        if (originalWidth <= maxWidth) {
            return { width: originalWidth, height: originalHeight };
        } else {
            const ratio = maxWidth / originalWidth;
            return { 
                width: maxWidth, 
                height: Math.round(originalHeight * ratio)
            };
        }
    }
    
    function createPreviewImageElement(image, displayDimensions) {
        const cleanName = image.name
            .replace(/\./g, '')
            .replace(/\s/g, '')
            .replace(/-/g, '')
            .replace(/_/g, '');
        
        const link = document.createElement('a');
        link.href = '/gallery/' + image.parent_path + '#' + cleanName;
        link.className = 'preview-item image-preview-item';
        link.style.width = displayDimensions.width + 'px';
        link.style.display = 'inline-block';
        
        const imageDiv = document.createElement('div');
        imageDiv.className = 'preview-image';
        imageDiv.style.width = displayDimensions.width + 'px';
        imageDiv.style.height = displayDimensions.height + 'px';
        imageDiv.style.backgroundColor = 'transparent';
        
        const img = document.createElement('img');
        img.src = image.thumbnail_url;
        img.alt = image.name;
        img.width = displayDimensions.width;
        img.height = displayDimensions.height;
        img.style.width = displayDimensions.width + 'px';
        img.style.height = displayDimensions.height + 'px';
        img.style.objectFit = 'cover';
        img.style.display = 'block';
        
        imageDiv.appendChild(img);
        link.appendChild(imageDiv);
        
        return link;
    }
    
    function layoutPreviewMasonry() {
        const columnWidth = calculatePreviewColumnWidth();
        const viewportWidth = window.innerWidth;
        const numColumns = viewportWidth <= 768 ? 1 : 2;
        
        // Clear existing content
        const columns = previewGrid.querySelectorAll('.masonry-column');
        columns.forEach(col => col.innerHTML = '');
        
        // Hide/show columns based on viewport
        columns[0].style.display = 'flex';
        if (columns[1]) {
            columns[1].style.display = numColumns > 1 ? 'flex' : 'none';
        }
        
        // Track column heights
        const columnHeights = new Array(numColumns).fill(0);
        
        // Process each image using actual dimensions
        previewImages.forEach(image => {
            let displayDimensions;
            
            if (image.dimensions && image.dimensions.length === 2) {
                // Use actual image dimensions
                displayDimensions = calculatePreviewDisplayDimensions(
                    image.dimensions[0], 
                    image.dimensions[1], 
                    columnWidth
                );
            } else {
                // Fallback to square estimation if dimensions not available
                displayDimensions = { width: columnWidth, height: columnWidth };
            }
            
            // Find shortest column
            const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
            
            // Create and append image element
            const imageElement = createPreviewImageElement(image, displayDimensions);
            columns[shortestColumnIndex].appendChild(imageElement);
            
            // Update column height
            columnHeights[shortestColumnIndex] += displayDimensions.height + 24; // gap
        });
    }
    
    // Initial layout
    layoutPreviewMasonry();
    
    // Handle window resize with debouncing
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(layoutPreviewMasonry, 150);
    });
})();
</script>