<section class="gallery-preview-component" id="gallery-preview-component">
    <div class="preview-masonry" id="gallery-preview-grid">
        <div class="masonry-column" data-column="0"></div>
        <div class="masonry-column" data-column="1"></div>
    </div>
    <div class="preview-footer">
        <a href="/gallery" class="btn-explore">Explore Full Gallery â†’</a>
    </div>
</section>


<script>
// Client-side gallery preview masonry layout
(async function() {
    const previewGrid = document.getElementById('gallery-preview-grid');
    const previewComponent = document.getElementById('gallery-preview-component');
    
    if (!previewGrid || !previewComponent) return;
    
    let previewImages;
    try {
        // Fetch gallery preview data from API
        const response = await fetch('/api/gallery/preview');
        if (!response.ok) {
            console.error('Failed to fetch gallery preview:', response.status);
            previewComponent.style.display = 'none';
            return;
        }
        const data = await response.json();
        previewImages = data.images;
        
        // Hide the component if no images
        if (!previewImages || previewImages.length === 0) {
            previewComponent.style.display = 'none';
            return;
        }
    } catch (e) {
        console.error('Failed to fetch gallery preview data:', e);
        previewComponent.style.display = 'none';
        return;
    }
    
    function calculatePreviewColumnWidth() {
        const viewportWidth = window.innerWidth;
        const previewGrid = document.getElementById('gallery-preview-grid');
        
        // Get the actual container width from the DOM
        const containerRect = previewGrid.getBoundingClientRect();
        const containerWidth = containerRect.width || Math.min(viewportWidth, 1200);
        
        // iOS-specific viewport handling
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const gap = 24; // 1.5rem
        
        if (viewportWidth <= 768) {
            // Mobile: single column centered with balanced width
            // Use actual container width to account for any padding/margins
            const horizontalPadding = 32; // 1rem on each side
            const availableWidth = Math.min(viewportWidth - (horizontalPadding * 2), containerWidth);
            // Use 85% of available width for better balance
            return Math.floor(availableWidth);
        } else {
            // Desktop: two columns
            const desktopPadding = isIOS ? 32 : 40;
            return (containerWidth - desktopPadding - gap) / 2;
        }
    }
    
    function calculatePreviewDisplayDimensions(originalWidth, originalHeight, maxWidth) {
        if (originalWidth <= maxWidth) {
            return { width: originalWidth, height: originalHeight };
        } else {
            const ratio = maxWidth / originalWidth;
            return { 
                width: maxWidth, 
                height: Math.round(originalHeight * ratio)
            };
        }
    }
    
    function createPreviewImageElement(image, displayDimensions) {
        const cleanName = image.name
            .replace(/\./g, '')
            .replace(/\s/g, '')
            .replace(/-/g, '')
            .replace(/_/g, '');
        
        const link = document.createElement('a');
        link.href = '/gallery/' + image.parent_path + '#' + cleanName;
        link.className = 'preview-item image-preview-item';
        link.style.width = displayDimensions.width + 'px';
        link.style.display = 'inline-block';
        
        const imageDiv = document.createElement('div');
        imageDiv.className = 'preview-image';
        imageDiv.style.width = displayDimensions.width + 'px';
        imageDiv.style.height = displayDimensions.height + 'px';
        imageDiv.style.backgroundColor = 'transparent';
        
        const img = document.createElement('img');
        const baseUrl = image.gallery_url || image.thumbnail_url;
        img.src = baseUrl;
        
        // Add srcset for high-DPI displays
        if (baseUrl) {
            const url2x = baseUrl.replace('?size=gallery', '?size=gallery@2x')
                                 .replace('?size=thumbnail', '?size=thumbnail@2x');
            img.srcset = `${baseUrl} 1x, ${url2x} 2x`;
        }
        
        img.alt = image.name;
        img.width = displayDimensions.width;
        img.height = displayDimensions.height;
        img.style.width = displayDimensions.width + 'px';
        img.style.height = displayDimensions.height + 'px';
        img.style.objectFit = 'cover';
        img.style.display = 'block';
        
        imageDiv.appendChild(img);
        link.appendChild(imageDiv);
        
        return link;
    }
    
    function layoutPreviewMasonry() {
        const columnWidth = calculatePreviewColumnWidth();
        const viewportWidth = window.innerWidth;
        const numColumns = viewportWidth <= 768 ? 1 : 2;
        
        // Clear existing content
        const columns = previewGrid.querySelectorAll('.masonry-column');
        columns.forEach(col => col.innerHTML = '');
        
        // Hide/show columns based on viewport
        columns[0].style.display = 'flex';
        if (columns[1]) {
            columns[1].style.display = numColumns > 1 ? 'flex' : 'none';
        }
        
        // Track column heights
        const columnHeights = new Array(numColumns).fill(0);
        
        // Process each image using actual dimensions
        previewImages.forEach(image => {
            let displayDimensions;
            
            if (image.dimensions && image.dimensions.length === 2) {
                // Use actual image dimensions
                displayDimensions = calculatePreviewDisplayDimensions(
                    image.dimensions[0], 
                    image.dimensions[1], 
                    columnWidth
                );
            } else {
                // Fallback to square estimation if dimensions not available
                displayDimensions = { width: columnWidth, height: columnWidth };
            }
            
            // Find shortest column
            const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
            
            // Create and append image element
            const imageElement = createPreviewImageElement(image, displayDimensions);
            columns[shortestColumnIndex].appendChild(imageElement);
            
            // Update column height
            columnHeights[shortestColumnIndex] += displayDimensions.height + 24; // gap
        });
    }
    
    // Initial layout
    layoutPreviewMasonry();
    
    // Handle window resize with debouncing
    let resizeTimeout;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    function handlePreviewResize() {
        clearTimeout(resizeTimeout);
        // Use longer timeout for iOS due to viewport changes during scroll
        const timeout = isIOS ? 300 : 150;
        resizeTimeout = setTimeout(layoutPreviewMasonry, timeout);
    }
    
    window.addEventListener('resize', handlePreviewResize);
    
    // iOS-specific: Handle orientation changes
    if (isIOS) {
        window.addEventListener('orientationchange', function() {
            setTimeout(layoutPreviewMasonry, 500); // Delay for iOS orientation animation
        });
    }
})();
</script>
