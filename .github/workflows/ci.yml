name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce the number of jobs by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Override with rust-toolchain.toml if stable
      if: matrix.rust == 'stable'
      run: |
        # The rust-toolchain.toml will override the toolchain
        # This ensures we test with the exact version specified
        rustc --version
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build release
      run: cargo build --release --verbose

  # Security audit
  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: cargo audit
